<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="86"><g><title>&lt;deduplicated_symbol&gt; (1 samples, 1.16%)</title><rect x="0.0000%" y="581" width="1.1628%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (1 samples, 1.16%)</title><rect x="1.1628%" y="581" width="1.1628%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="1.4128%" y="591.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 1.16%)</title><rect x="1.1628%" y="565" width="1.1628%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="1.4128%" y="575.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 1.16%)</title><rect x="1.1628%" y="549" width="1.1628%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="1.4128%" y="559.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 1.16%)</title><rect x="1.1628%" y="533" width="1.1628%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="1.4128%" y="543.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 1.16%)</title><rect x="1.1628%" y="517" width="1.1628%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="1.4128%" y="527.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 1.16%)</title><rect x="1.1628%" y="501" width="1.1628%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="1.4128%" y="511.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 1.16%)</title><rect x="1.1628%" y="485" width="1.1628%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="1.4128%" y="495.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 1.16%)</title><rect x="1.1628%" y="469" width="1.1628%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="1.4128%" y="479.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 1.16%)</title><rect x="1.1628%" y="453" width="1.1628%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="1.4128%" y="463.50"></text></g><g><title>libSystem_initializer (1 samples, 1.16%)</title><rect x="1.1628%" y="437" width="1.1628%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="1.4128%" y="447.50"></text></g><g><title>_libxpc_initializer (1 samples, 1.16%)</title><rect x="1.1628%" y="421" width="1.1628%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="1.4128%" y="431.50"></text></g><g><title>_xpc_collect_images (1 samples, 1.16%)</title><rect x="1.1628%" y="405" width="1.1628%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="1.4128%" y="415.50"></text></g><g><title>xpc_bundle_copy_services (1 samples, 1.16%)</title><rect x="1.1628%" y="389" width="1.1628%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="1.4128%" y="399.50"></text></g><g><title>_xpc_bundle_resolve (1 samples, 1.16%)</title><rect x="1.1628%" y="373" width="1.1628%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="1.4128%" y="383.50"></text></g><g><title>_dispatch_once_callout (1 samples, 1.16%)</title><rect x="1.1628%" y="357" width="1.1628%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="1.4128%" y="367.50"></text></g><g><title>_dispatch_client_callout (1 samples, 1.16%)</title><rect x="1.1628%" y="341" width="1.1628%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="1.4128%" y="351.50"></text></g><g><title>___xpc_bundle_resolve_block_invoke (1 samples, 1.16%)</title><rect x="1.1628%" y="325" width="1.1628%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="1.4128%" y="335.50"></text></g><g><title>_xpc_bundle_resolve_sync (1 samples, 1.16%)</title><rect x="1.1628%" y="309" width="1.1628%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="1.4128%" y="319.50"></text></g><g><title>_xpc_bundle_resolve_root (1 samples, 1.16%)</title><rect x="1.1628%" y="293" width="1.1628%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="1.4128%" y="303.50"></text></g><g><title>_resolve_and_stat_path (1 samples, 1.16%)</title><rect x="1.1628%" y="277" width="1.1628%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="1.4128%" y="287.50"></text></g><g><title>fgetattrlist (1 samples, 1.16%)</title><rect x="1.1628%" y="261" width="1.1628%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="1.4128%" y="271.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (3 samples, 3.49%)</title><rect x="0.0000%" y="613" width="3.4884%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="3"/><text x="0.2500%" y="623.50">dyl..</text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (3 samples, 3.49%)</title><rect x="0.0000%" y="597" width="3.4884%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="607.50">dyl..</text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="581" width="1.1628%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="2.5756%" y="591.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="565" width="1.1628%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="2.5756%" y="575.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="549" width="1.1628%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="2.5756%" y="559.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="533" width="1.1628%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="2.5756%" y="543.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="517" width="1.1628%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="2.5756%" y="527.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="501" width="1.1628%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="2.5756%" y="511.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="485" width="1.1628%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="2.5756%" y="495.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="469" width="1.1628%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="2.5756%" y="479.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="453" width="1.1628%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="2.5756%" y="463.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="437" width="1.1628%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="2.5756%" y="447.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="421" width="1.1628%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="2.5756%" y="431.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="405" width="1.1628%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="2.5756%" y="415.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="389" width="1.1628%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="2.5756%" y="399.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="373" width="1.1628%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="2.5756%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="357" width="1.1628%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="2.5756%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="341" width="1.1628%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="1"/><text x="2.5756%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="325" width="1.1628%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="1"/><text x="2.5756%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="309" width="1.1628%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="1"/><text x="2.5756%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="293" width="1.1628%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="1"/><text x="2.5756%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="277" width="1.1628%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="1"/><text x="2.5756%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="261" width="1.1628%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="1"/><text x="2.5756%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="245" width="1.1628%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="1"/><text x="2.5756%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="229" width="1.1628%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="1"/><text x="2.5756%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="213" width="1.1628%" height="15" fill="rgb(250,191,14)" fg:x="2" fg:w="1"/><text x="2.5756%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="197" width="1.1628%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="1"/><text x="2.5756%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="181" width="1.1628%" height="15" fill="rgb(206,27,48)" fg:x="2" fg:w="1"/><text x="2.5756%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="165" width="1.1628%" height="15" fill="rgb(225,35,8)" fg:x="2" fg:w="1"/><text x="2.5756%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="149" width="1.1628%" height="15" fill="rgb(250,213,24)" fg:x="2" fg:w="1"/><text x="2.5756%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="133" width="1.1628%" height="15" fill="rgb(247,123,22)" fg:x="2" fg:w="1"/><text x="2.5756%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="117" width="1.1628%" height="15" fill="rgb(231,138,38)" fg:x="2" fg:w="1"/><text x="2.5756%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="101" width="1.1628%" height="15" fill="rgb(231,145,46)" fg:x="2" fg:w="1"/><text x="2.5756%" y="111.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="85" width="1.1628%" height="15" fill="rgb(251,118,11)" fg:x="2" fg:w="1"/><text x="2.5756%" y="95.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="69" width="1.1628%" height="15" fill="rgb(217,147,25)" fg:x="2" fg:w="1"/><text x="2.5756%" y="79.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="53" width="1.1628%" height="15" fill="rgb(247,81,37)" fg:x="2" fg:w="1"/><text x="2.5756%" y="63.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 1.16%)</title><rect x="2.3256%" y="37" width="1.1628%" height="15" fill="rgb(209,12,38)" fg:x="2" fg:w="1"/><text x="2.5756%" y="47.50"></text></g><g><title>&lt;&amp;mut csv::serializer::SeRecord&lt;W&gt; as serde::ser::SerializeTuple&gt;::serialize_element (1 samples, 1.16%)</title><rect x="3.4884%" y="517" width="1.1628%" height="15" fill="rgb(227,1,9)" fg:x="3" fg:w="1"/><text x="3.7384%" y="527.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 1.16%)</title><rect x="3.4884%" y="501" width="1.1628%" height="15" fill="rgb(248,47,43)" fg:x="3" fg:w="1"/><text x="3.7384%" y="511.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 1.16%)</title><rect x="3.4884%" y="485" width="1.1628%" height="15" fill="rgb(221,10,30)" fg:x="3" fg:w="1"/><text x="3.7384%" y="495.50"></text></g><g><title>csv::serializer::serialize (1 samples, 1.16%)</title><rect x="4.6512%" y="517" width="1.1628%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="1"/><text x="4.9012%" y="527.50"></text></g><g><title>&lt;&amp;mut csv::serializer::SeRecord&lt;W&gt; as serde::ser::SerializeTuple&gt;::serialize_element (1 samples, 1.16%)</title><rect x="4.6512%" y="501" width="1.1628%" height="15" fill="rgb(222,148,37)" fg:x="4" fg:w="1"/><text x="4.9012%" y="511.50"></text></g><g><title>csv_core::writer::Writer::field (1 samples, 1.16%)</title><rect x="4.6512%" y="485" width="1.1628%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="1"/><text x="4.9012%" y="495.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 1.16%)</title><rect x="4.6512%" y="469" width="1.1628%" height="15" fill="rgb(247,98,35)" fg:x="4" fg:w="1"/><text x="4.9012%" y="479.50"></text></g><g><title>greed::solver::GreedSolver::png (3 samples, 3.49%)</title><rect x="3.4884%" y="533" width="3.4884%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="3"/><text x="3.7384%" y="543.50">gre..</text></g><g><title>std::process::Command::output (1 samples, 1.16%)</title><rect x="5.8140%" y="517" width="1.1628%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="1"/><text x="6.0640%" y="527.50"></text></g><g><title>std::sys::process::unix::unix::_&lt;impl std::sys::process::unix::common::Command&gt;::spawn (1 samples, 1.16%)</title><rect x="5.8140%" y="501" width="1.1628%" height="15" fill="rgb(246,177,23)" fg:x="5" fg:w="1"/><text x="6.0640%" y="511.50"></text></g><g><title>posix_spawnp (1 samples, 1.16%)</title><rect x="5.8140%" y="485" width="1.1628%" height="15" fill="rgb(230,62,27)" fg:x="5" fg:w="1"/><text x="6.0640%" y="495.50"></text></g><g><title>__posix_spawn (1 samples, 1.16%)</title><rect x="5.8140%" y="469" width="1.1628%" height="15" fill="rgb(216,154,8)" fg:x="5" fg:w="1"/><text x="6.0640%" y="479.50"></text></g><g><title>greed::solver::GreedSolver::solve_terminal_states (1 samples, 1.16%)</title><rect x="6.9767%" y="517" width="1.1628%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="1"/><text x="7.2267%" y="527.50"></text></g><g><title>rayon::iter::collect::collect_with_consumer (1 samples, 1.16%)</title><rect x="6.9767%" y="501" width="1.1628%" height="15" fill="rgb(251,115,12)" fg:x="6" fg:w="1"/><text x="7.2267%" y="511.50"></text></g><g><title>rayon_core::current_num_threads (1 samples, 1.16%)</title><rect x="6.9767%" y="485" width="1.1628%" height="15" fill="rgb(240,54,50)" fg:x="6" fg:w="1"/><text x="7.2267%" y="495.50"></text></g><g><title>rayon_core::registry::global_registry (1 samples, 1.16%)</title><rect x="6.9767%" y="469" width="1.1628%" height="15" fill="rgb(233,84,52)" fg:x="6" fg:w="1"/><text x="7.2267%" y="479.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 1.16%)</title><rect x="6.9767%" y="453" width="1.1628%" height="15" fill="rgb(207,117,47)" fg:x="6" fg:w="1"/><text x="7.2267%" y="463.50"></text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 1.16%)</title><rect x="6.9767%" y="437" width="1.1628%" height="15" fill="rgb(249,43,39)" fg:x="6" fg:w="1"/><text x="7.2267%" y="447.50"></text></g><g><title>rayon_core::registry::Registry::new (1 samples, 1.16%)</title><rect x="6.9767%" y="421" width="1.1628%" height="15" fill="rgb(209,38,44)" fg:x="6" fg:w="1"/><text x="7.2267%" y="431.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn (1 samples, 1.16%)</title><rect x="6.9767%" y="405" width="1.1628%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="1"/><text x="7.2267%" y="415.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 1.16%)</title><rect x="6.9767%" y="389" width="1.1628%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="1"/><text x="7.2267%" y="399.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (1 samples, 1.16%)</title><rect x="6.9767%" y="373" width="1.1628%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="1"/><text x="7.2267%" y="383.50"></text></g><g><title>_pthread_create (1 samples, 1.16%)</title><rect x="6.9767%" y="357" width="1.1628%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="1"/><text x="7.2267%" y="367.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (1 samples, 1.16%)</title><rect x="6.9767%" y="341" width="1.1628%" height="15" fill="rgb(211,81,21)" fg:x="6" fg:w="1"/><text x="7.2267%" y="351.50"></text></g><g><title>greed::solver::GreedSolver::solve (2 samples, 2.33%)</title><rect x="6.9767%" y="533" width="2.3256%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="2"/><text x="7.2267%" y="543.50">g..</text></g><g><title>greed::solver::PMFLookup::precompute (1 samples, 1.16%)</title><rect x="8.1395%" y="517" width="1.1628%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="1"/><text x="8.3895%" y="527.50"></text></g><g><title>greed::pmf::fft_convolve (1 samples, 1.16%)</title><rect x="8.1395%" y="501" width="1.1628%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="1"/><text x="8.3895%" y="511.50"></text></g><g><title>free_small (1 samples, 1.16%)</title><rect x="8.1395%" y="485" width="1.1628%" height="15" fill="rgb(244,218,35)" fg:x="7" fg:w="1"/><text x="8.3895%" y="495.50"></text></g><g><title>small_free_list_add_ptr (1 samples, 1.16%)</title><rect x="8.1395%" y="469" width="1.1628%" height="15" fill="rgb(240,68,47)" fg:x="7" fg:w="1"/><text x="8.3895%" y="479.50"></text></g><g><title>start (10 samples, 11.63%)</title><rect x="0.0000%" y="629" width="11.6279%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="10"/><text x="0.2500%" y="639.50">start</text></g><g><title>main (7 samples, 8.14%)</title><rect x="3.4884%" y="613" width="8.1395%" height="15" fill="rgb(235,124,12)" fg:x="3" fg:w="7"/><text x="3.7384%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (7 samples, 8.14%)</title><rect x="3.4884%" y="597" width="8.1395%" height="15" fill="rgb(224,169,11)" fg:x="3" fg:w="7"/><text x="3.7384%" y="607.50">std::rt::la..</text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 8.14%)</title><rect x="3.4884%" y="581" width="8.1395%" height="15" fill="rgb(250,166,2)" fg:x="3" fg:w="7"/><text x="3.7384%" y="591.50">std::rt::la..</text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 8.14%)</title><rect x="3.4884%" y="565" width="8.1395%" height="15" fill="rgb(242,216,29)" fg:x="3" fg:w="7"/><text x="3.7384%" y="575.50">core::ops::..</text></g><g><title>greed::main (7 samples, 8.14%)</title><rect x="3.4884%" y="549" width="8.1395%" height="15" fill="rgb(230,116,27)" fg:x="3" fg:w="7"/><text x="3.7384%" y="559.50">greed::main</text></g><g><title>greed::solver::GreedSolver::solve_normal_states (2 samples, 2.33%)</title><rect x="9.3023%" y="533" width="2.3256%" height="15" fill="rgb(228,99,48)" fg:x="8" fg:w="2"/><text x="9.5523%" y="543.50">g..</text></g><g><title>rayon::iter::extend::_&lt;impl rayon::iter::ParallelExtend&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::par_extend (2 samples, 2.33%)</title><rect x="9.3023%" y="517" width="2.3256%" height="15" fill="rgb(253,11,6)" fg:x="8" fg:w="2"/><text x="9.5523%" y="527.50">r..</text></g><g><title>rayon::iter::collect::collect_with_consumer (2 samples, 2.33%)</title><rect x="9.3023%" y="501" width="2.3256%" height="15" fill="rgb(247,143,39)" fg:x="8" fg:w="2"/><text x="9.5523%" y="511.50">r..</text></g><g><title>&lt;rayon::range_inclusive::Iter&lt;T&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (2 samples, 2.33%)</title><rect x="9.3023%" y="485" width="2.3256%" height="15" fill="rgb(236,97,10)" fg:x="8" fg:w="2"/><text x="9.5523%" y="495.50">&lt;..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="9.3023%" y="469" width="2.3256%" height="15" fill="rgb(233,208,19)" fg:x="8" fg:w="2"/><text x="9.5523%" y="479.50">r..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold (2 samples, 2.33%)</title><rect x="9.3023%" y="453" width="2.3256%" height="15" fill="rgb(216,164,2)" fg:x="8" fg:w="2"/><text x="9.5523%" y="463.50">r..</text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (2 samples, 2.33%)</title><rect x="9.3023%" y="437" width="2.3256%" height="15" fill="rgb(220,129,5)" fg:x="8" fg:w="2"/><text x="9.5523%" y="447.50">r..</text></g><g><title>__psynch_cvwait (2 samples, 2.33%)</title><rect x="9.3023%" y="421" width="2.3256%" height="15" fill="rgb(242,17,10)" fg:x="8" fg:w="2"/><text x="9.5523%" y="431.50">_..</text></g><g><title>&lt;rayon_core::latch::LatchRef&lt;L&gt; as rayon_core::latch::Latch&gt;::set (1 samples, 1.16%)</title><rect x="11.6279%" y="501" width="1.1628%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="1"/><text x="11.8779%" y="511.50"></text></g><g><title>__psynch_cvbroad (1 samples, 1.16%)</title><rect x="11.6279%" y="485" width="1.1628%" height="15" fill="rgb(251,28,31)" fg:x="10" fg:w="1"/><text x="11.8779%" y="495.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="12.7907%" y="421" width="1.1628%" height="15" fill="rgb(233,223,10)" fg:x="11" fg:w="1"/><text x="13.0407%" y="431.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="12.7907%" y="405" width="1.1628%" height="15" fill="rgb(215,21,27)" fg:x="11" fg:w="1"/><text x="13.0407%" y="415.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="12.7907%" y="389" width="1.1628%" height="15" fill="rgb(232,23,21)" fg:x="11" fg:w="1"/><text x="13.0407%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="13.9535%" y="405" width="2.3256%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="2"/><text x="14.2035%" y="415.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2 samples, 2.33%)</title><rect x="13.9535%" y="389" width="2.3256%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="2"/><text x="14.2035%" y="399.50">r..</text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (2 samples, 2.33%)</title><rect x="13.9535%" y="373" width="2.3256%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="2"/><text x="14.2035%" y="383.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="13.9535%" y="357" width="2.3256%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="2"/><text x="14.2035%" y="367.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2 samples, 2.33%)</title><rect x="13.9535%" y="341" width="2.3256%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="2"/><text x="14.2035%" y="351.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="13.9535%" y="325" width="2.3256%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="2"/><text x="14.2035%" y="335.50">r..</text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2 samples, 2.33%)</title><rect x="13.9535%" y="309" width="2.3256%" height="15" fill="rgb(206,192,2)" fg:x="12" fg:w="2"/><text x="14.2035%" y="319.50">c..</text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="16.2791%" y="293" width="1.1628%" height="15" fill="rgb(241,108,4)" fg:x="14" fg:w="1"/><text x="16.5291%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 3.49%)</title><rect x="16.2791%" y="309" width="3.4884%" height="15" fill="rgb(247,173,49)" fg:x="14" fg:w="3"/><text x="16.5291%" y="319.50">ray..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (2 samples, 2.33%)</title><rect x="17.4419%" y="293" width="2.3256%" height="15" fill="rgb(224,114,35)" fg:x="15" fg:w="2"/><text x="17.6919%" y="303.50">r..</text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2 samples, 2.33%)</title><rect x="17.4419%" y="277" width="2.3256%" height="15" fill="rgb(245,159,27)" fg:x="15" fg:w="2"/><text x="17.6919%" y="287.50">c..</text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (2 samples, 2.33%)</title><rect x="17.4419%" y="261" width="2.3256%" height="15" fill="rgb(245,172,44)" fg:x="15" fg:w="2"/><text x="17.6919%" y="271.50">g..</text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="19.7674%" y="277" width="1.1628%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="1"/><text x="20.0174%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (5 samples, 5.81%)</title><rect x="16.2791%" y="405" width="5.8140%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="5"/><text x="16.5291%" y="415.50">rayon_c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 5.81%)</title><rect x="16.2791%" y="389" width="5.8140%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="5"/><text x="16.5291%" y="399.50">rayon::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (5 samples, 5.81%)</title><rect x="16.2791%" y="373" width="5.8140%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="5"/><text x="16.5291%" y="383.50">rayon_c..</text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (5 samples, 5.81%)</title><rect x="16.2791%" y="357" width="5.8140%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="5"/><text x="16.5291%" y="367.50">rayon_c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 5.81%)</title><rect x="16.2791%" y="341" width="5.8140%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="5"/><text x="16.5291%" y="351.50">rayon::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (5 samples, 5.81%)</title><rect x="16.2791%" y="325" width="5.8140%" height="15" fill="rgb(251,123,47)" fg:x="14" fg:w="5"/><text x="16.5291%" y="335.50">rayon_c..</text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (2 samples, 2.33%)</title><rect x="19.7674%" y="309" width="2.3256%" height="15" fill="rgb(221,13,13)" fg:x="17" fg:w="2"/><text x="20.0174%" y="319.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="19.7674%" y="293" width="2.3256%" height="15" fill="rgb(238,131,9)" fg:x="17" fg:w="2"/><text x="20.0174%" y="303.50">r..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="20.9302%" y="277" width="1.1628%" height="15" fill="rgb(211,50,8)" fg:x="18" fg:w="1"/><text x="21.1802%" y="287.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="20.9302%" y="261" width="1.1628%" height="15" fill="rgb(245,182,24)" fg:x="18" fg:w="1"/><text x="21.1802%" y="271.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="20.9302%" y="245" width="1.1628%" height="15" fill="rgb(242,14,37)" fg:x="18" fg:w="1"/><text x="21.1802%" y="255.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 10.47%)</title><rect x="12.7907%" y="437" width="10.4651%" height="15" fill="rgb(246,228,12)" fg:x="11" fg:w="9"/><text x="13.0407%" y="447.50">rayon::iter::pl..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (8 samples, 9.30%)</title><rect x="13.9535%" y="421" width="9.3023%" height="15" fill="rgb(213,55,15)" fg:x="12" fg:w="8"/><text x="14.2035%" y="431.50">rayon_core::j..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 1.16%)</title><rect x="22.0930%" y="405" width="1.1628%" height="15" fill="rgb(209,9,3)" fg:x="19" fg:w="1"/><text x="22.3430%" y="415.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 1.16%)</title><rect x="22.0930%" y="389" width="1.1628%" height="15" fill="rgb(230,59,30)" fg:x="19" fg:w="1"/><text x="22.3430%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="22.0930%" y="373" width="1.1628%" height="15" fill="rgb(209,121,21)" fg:x="19" fg:w="1"/><text x="22.3430%" y="383.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="22.0930%" y="357" width="1.1628%" height="15" fill="rgb(220,109,13)" fg:x="19" fg:w="1"/><text x="22.3430%" y="367.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="22.0930%" y="341" width="1.1628%" height="15" fill="rgb(232,18,1)" fg:x="19" fg:w="1"/><text x="22.3430%" y="351.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="22.0930%" y="325" width="1.1628%" height="15" fill="rgb(215,41,42)" fg:x="19" fg:w="1"/><text x="22.3430%" y="335.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="23.2558%" y="373" width="1.1628%" height="15" fill="rgb(224,123,36)" fg:x="20" fg:w="1"/><text x="23.5058%" y="383.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="23.2558%" y="357" width="1.1628%" height="15" fill="rgb(240,125,3)" fg:x="20" fg:w="1"/><text x="23.5058%" y="367.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="23.2558%" y="341" width="1.1628%" height="15" fill="rgb(205,98,50)" fg:x="20" fg:w="1"/><text x="23.5058%" y="351.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="23.2558%" y="389" width="2.3256%" height="15" fill="rgb(205,185,37)" fg:x="20" fg:w="2"/><text x="23.5058%" y="399.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="24.4186%" y="373" width="1.1628%" height="15" fill="rgb(238,207,15)" fg:x="21" fg:w="1"/><text x="24.6686%" y="383.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="24.4186%" y="357" width="1.1628%" height="15" fill="rgb(213,199,42)" fg:x="21" fg:w="1"/><text x="24.6686%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="24.4186%" y="341" width="1.1628%" height="15" fill="rgb(235,201,11)" fg:x="21" fg:w="1"/><text x="24.6686%" y="351.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="24.4186%" y="325" width="1.1628%" height="15" fill="rgb(207,46,11)" fg:x="21" fg:w="1"/><text x="24.6686%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="24.4186%" y="309" width="1.1628%" height="15" fill="rgb(241,35,35)" fg:x="21" fg:w="1"/><text x="24.6686%" y="319.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="24.4186%" y="293" width="1.1628%" height="15" fill="rgb(243,32,47)" fg:x="21" fg:w="1"/><text x="24.6686%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="25.5814%" y="341" width="2.3256%" height="15" fill="rgb(247,202,23)" fg:x="22" fg:w="2"/><text x="25.8314%" y="351.50">r..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (2 samples, 2.33%)</title><rect x="25.5814%" y="325" width="2.3256%" height="15" fill="rgb(219,102,11)" fg:x="22" fg:w="2"/><text x="25.8314%" y="335.50">r..</text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2 samples, 2.33%)</title><rect x="25.5814%" y="309" width="2.3256%" height="15" fill="rgb(243,110,44)" fg:x="22" fg:w="2"/><text x="25.8314%" y="319.50">c..</text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (2 samples, 2.33%)</title><rect x="25.5814%" y="293" width="2.3256%" height="15" fill="rgb(222,74,54)" fg:x="22" fg:w="2"/><text x="25.8314%" y="303.50">g..</text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (5 samples, 5.81%)</title><rect x="23.2558%" y="437" width="5.8140%" height="15" fill="rgb(216,99,12)" fg:x="20" fg:w="5"/><text x="23.5058%" y="447.50">rayon_c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 5.81%)</title><rect x="23.2558%" y="421" width="5.8140%" height="15" fill="rgb(226,22,26)" fg:x="20" fg:w="5"/><text x="23.5058%" y="431.50">rayon::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (5 samples, 5.81%)</title><rect x="23.2558%" y="405" width="5.8140%" height="15" fill="rgb(217,163,10)" fg:x="20" fg:w="5"/><text x="23.5058%" y="415.50">rayon_c..</text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (3 samples, 3.49%)</title><rect x="25.5814%" y="389" width="3.4884%" height="15" fill="rgb(213,25,53)" fg:x="22" fg:w="3"/><text x="25.8314%" y="399.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 3.49%)</title><rect x="25.5814%" y="373" width="3.4884%" height="15" fill="rgb(252,105,26)" fg:x="22" fg:w="3"/><text x="25.8314%" y="383.50">ray..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (3 samples, 3.49%)</title><rect x="25.5814%" y="357" width="3.4884%" height="15" fill="rgb(220,39,43)" fg:x="22" fg:w="3"/><text x="25.8314%" y="367.50">ray..</text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="27.9070%" y="341" width="1.1628%" height="15" fill="rgb(229,68,48)" fg:x="24" fg:w="1"/><text x="28.1570%" y="351.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="27.9070%" y="325" width="1.1628%" height="15" fill="rgb(252,8,32)" fg:x="24" fg:w="1"/><text x="28.1570%" y="335.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="27.9070%" y="309" width="1.1628%" height="15" fill="rgb(223,20,43)" fg:x="24" fg:w="1"/><text x="28.1570%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (15 samples, 17.44%)</title><rect x="12.7907%" y="469" width="17.4419%" height="15" fill="rgb(229,81,49)" fg:x="11" fg:w="15"/><text x="13.0407%" y="479.50">rayon::iter::plumbing::brid..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (15 samples, 17.44%)</title><rect x="12.7907%" y="453" width="17.4419%" height="15" fill="rgb(236,28,36)" fg:x="11" fg:w="15"/><text x="13.0407%" y="463.50">rayon_core::join::join_cont..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 1.16%)</title><rect x="29.0698%" y="437" width="1.1628%" height="15" fill="rgb(249,185,26)" fg:x="25" fg:w="1"/><text x="29.3198%" y="447.50"></text></g><g><title>swtch_pri (1 samples, 1.16%)</title><rect x="29.0698%" y="421" width="1.1628%" height="15" fill="rgb(249,174,33)" fg:x="25" fg:w="1"/><text x="29.3198%" y="431.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="30.2326%" y="405" width="1.1628%" height="15" fill="rgb(233,201,37)" fg:x="26" fg:w="1"/><text x="30.4826%" y="415.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="30.2326%" y="389" width="1.1628%" height="15" fill="rgb(221,78,26)" fg:x="26" fg:w="1"/><text x="30.4826%" y="399.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="30.2326%" y="373" width="1.1628%" height="15" fill="rgb(250,127,30)" fg:x="26" fg:w="1"/><text x="30.4826%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="30.2326%" y="421" width="2.3256%" height="15" fill="rgb(230,49,44)" fg:x="26" fg:w="2"/><text x="30.4826%" y="431.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="31.3953%" y="405" width="1.1628%" height="15" fill="rgb(229,67,23)" fg:x="27" fg:w="1"/><text x="31.6453%" y="415.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="31.3953%" y="389" width="1.1628%" height="15" fill="rgb(249,83,47)" fg:x="27" fg:w="1"/><text x="31.6453%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="31.3953%" y="373" width="1.1628%" height="15" fill="rgb(215,43,3)" fg:x="27" fg:w="1"/><text x="31.6453%" y="383.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="31.3953%" y="357" width="1.1628%" height="15" fill="rgb(238,154,13)" fg:x="27" fg:w="1"/><text x="31.6453%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="31.3953%" y="341" width="1.1628%" height="15" fill="rgb(219,56,2)" fg:x="27" fg:w="1"/><text x="31.6453%" y="351.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="31.3953%" y="325" width="1.1628%" height="15" fill="rgb(233,0,4)" fg:x="27" fg:w="1"/><text x="31.6453%" y="335.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="31.3953%" y="309" width="1.1628%" height="15" fill="rgb(235,30,7)" fg:x="27" fg:w="1"/><text x="31.6453%" y="319.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="31.3953%" y="293" width="1.1628%" height="15" fill="rgb(250,79,13)" fg:x="27" fg:w="1"/><text x="31.6453%" y="303.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="32.5581%" y="421" width="1.1628%" height="15" fill="rgb(211,146,34)" fg:x="28" fg:w="1"/><text x="32.8081%" y="431.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="32.5581%" y="405" width="1.1628%" height="15" fill="rgb(228,22,38)" fg:x="28" fg:w="1"/><text x="32.8081%" y="415.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="32.5581%" y="389" width="1.1628%" height="15" fill="rgb(235,168,5)" fg:x="28" fg:w="1"/><text x="32.8081%" y="399.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="32.5581%" y="373" width="1.1628%" height="15" fill="rgb(221,155,16)" fg:x="28" fg:w="1"/><text x="32.8081%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="32.5581%" y="357" width="1.1628%" height="15" fill="rgb(215,215,53)" fg:x="28" fg:w="1"/><text x="32.8081%" y="367.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="32.5581%" y="341" width="1.1628%" height="15" fill="rgb(223,4,10)" fg:x="28" fg:w="1"/><text x="32.8081%" y="351.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="32.5581%" y="325" width="1.1628%" height="15" fill="rgb(234,103,6)" fg:x="28" fg:w="1"/><text x="32.8081%" y="335.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="32.5581%" y="309" width="1.1628%" height="15" fill="rgb(227,97,0)" fg:x="28" fg:w="1"/><text x="32.8081%" y="319.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (4 samples, 4.65%)</title><rect x="30.2326%" y="469" width="4.6512%" height="15" fill="rgb(234,150,53)" fg:x="26" fg:w="4"/><text x="30.4826%" y="479.50">rayon..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 4.65%)</title><rect x="30.2326%" y="453" width="4.6512%" height="15" fill="rgb(228,201,54)" fg:x="26" fg:w="4"/><text x="30.4826%" y="463.50">rayon..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (4 samples, 4.65%)</title><rect x="30.2326%" y="437" width="4.6512%" height="15" fill="rgb(222,22,37)" fg:x="26" fg:w="4"/><text x="30.4826%" y="447.50">rayon..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 1.16%)</title><rect x="33.7209%" y="421" width="1.1628%" height="15" fill="rgb(237,53,32)" fg:x="29" fg:w="1"/><text x="33.9709%" y="431.50"></text></g><g><title>swtch_pri (1 samples, 1.16%)</title><rect x="33.7209%" y="405" width="1.1628%" height="15" fill="rgb(233,25,53)" fg:x="29" fg:w="1"/><text x="33.9709%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="34.8837%" y="405" width="1.1628%" height="15" fill="rgb(210,40,34)" fg:x="30" fg:w="1"/><text x="35.1337%" y="415.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="34.8837%" y="389" width="1.1628%" height="15" fill="rgb(241,220,44)" fg:x="30" fg:w="1"/><text x="35.1337%" y="399.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="34.8837%" y="373" width="1.1628%" height="15" fill="rgb(235,28,35)" fg:x="30" fg:w="1"/><text x="35.1337%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="34.8837%" y="357" width="1.1628%" height="15" fill="rgb(210,56,17)" fg:x="30" fg:w="1"/><text x="35.1337%" y="367.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="34.8837%" y="341" width="1.1628%" height="15" fill="rgb(224,130,29)" fg:x="30" fg:w="1"/><text x="35.1337%" y="351.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="34.8837%" y="325" width="1.1628%" height="15" fill="rgb(235,212,8)" fg:x="30" fg:w="1"/><text x="35.1337%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="34.8837%" y="309" width="1.1628%" height="15" fill="rgb(223,33,50)" fg:x="30" fg:w="1"/><text x="35.1337%" y="319.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="34.8837%" y="293" width="1.1628%" height="15" fill="rgb(219,149,13)" fg:x="30" fg:w="1"/><text x="35.1337%" y="303.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="34.8837%" y="277" width="1.1628%" height="15" fill="rgb(250,156,29)" fg:x="30" fg:w="1"/><text x="35.1337%" y="287.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="34.8837%" y="261" width="1.1628%" height="15" fill="rgb(216,193,19)" fg:x="30" fg:w="1"/><text x="35.1337%" y="271.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2 samples, 2.33%)</title><rect x="34.8837%" y="453" width="2.3256%" height="15" fill="rgb(216,135,14)" fg:x="30" fg:w="2"/><text x="35.1337%" y="463.50">&lt;..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="34.8837%" y="437" width="2.3256%" height="15" fill="rgb(241,47,5)" fg:x="30" fg:w="2"/><text x="35.1337%" y="447.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2 samples, 2.33%)</title><rect x="34.8837%" y="421" width="2.3256%" height="15" fill="rgb(233,42,35)" fg:x="30" fg:w="2"/><text x="35.1337%" y="431.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 1.16%)</title><rect x="36.0465%" y="405" width="1.1628%" height="15" fill="rgb(231,13,6)" fg:x="31" fg:w="1"/><text x="36.2965%" y="415.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 1.16%)</title><rect x="36.0465%" y="389" width="1.1628%" height="15" fill="rgb(207,181,40)" fg:x="31" fg:w="1"/><text x="36.2965%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="36.0465%" y="373" width="1.1628%" height="15" fill="rgb(254,173,49)" fg:x="31" fg:w="1"/><text x="36.2965%" y="383.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="36.0465%" y="357" width="1.1628%" height="15" fill="rgb(221,1,38)" fg:x="31" fg:w="1"/><text x="36.2965%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="36.0465%" y="341" width="1.1628%" height="15" fill="rgb(206,124,46)" fg:x="31" fg:w="1"/><text x="36.2965%" y="351.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="36.0465%" y="325" width="1.1628%" height="15" fill="rgb(249,21,11)" fg:x="31" fg:w="1"/><text x="36.2965%" y="335.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 1.16%)</title><rect x="36.0465%" y="309" width="1.1628%" height="15" fill="rgb(222,201,40)" fg:x="31" fg:w="1"/><text x="36.2965%" y="319.50"></text></g><g><title>swtch_pri (1 samples, 1.16%)</title><rect x="36.0465%" y="293" width="1.1628%" height="15" fill="rgb(235,61,29)" fg:x="31" fg:w="1"/><text x="36.2965%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (25 samples, 29.07%)</title><rect x="12.7907%" y="501" width="29.0698%" height="15" fill="rgb(219,207,3)" fg:x="11" fg:w="25"/><text x="13.0407%" y="511.50">rayon::iter::plumbing::bridge_producer_consumer..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (25 samples, 29.07%)</title><rect x="12.7907%" y="485" width="29.0698%" height="15" fill="rgb(222,56,46)" fg:x="11" fg:w="25"/><text x="13.0407%" y="495.50">rayon_core::join::join_context::_{{closure}}</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (6 samples, 6.98%)</title><rect x="34.8837%" y="469" width="6.9767%" height="15" fill="rgb(239,76,54)" fg:x="30" fg:w="6"/><text x="35.1337%" y="479.50">rayon_cor..</text></g><g><title>swtch_pri (4 samples, 4.65%)</title><rect x="37.2093%" y="453" width="4.6512%" height="15" fill="rgb(231,124,27)" fg:x="32" fg:w="4"/><text x="37.4593%" y="463.50">swtch..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="41.8605%" y="389" width="1.1628%" height="15" fill="rgb(249,195,6)" fg:x="36" fg:w="1"/><text x="42.1105%" y="399.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="41.8605%" y="373" width="1.1628%" height="15" fill="rgb(237,174,47)" fg:x="36" fg:w="1"/><text x="42.1105%" y="383.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="41.8605%" y="357" width="1.1628%" height="15" fill="rgb(206,201,31)" fg:x="36" fg:w="1"/><text x="42.1105%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="41.8605%" y="341" width="1.1628%" height="15" fill="rgb(231,57,52)" fg:x="36" fg:w="1"/><text x="42.1105%" y="351.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="41.8605%" y="325" width="1.1628%" height="15" fill="rgb(248,177,22)" fg:x="36" fg:w="1"/><text x="42.1105%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="41.8605%" y="309" width="1.1628%" height="15" fill="rgb(215,211,37)" fg:x="36" fg:w="1"/><text x="42.1105%" y="319.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="41.8605%" y="293" width="1.1628%" height="15" fill="rgb(241,128,51)" fg:x="36" fg:w="1"/><text x="42.1105%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="41.8605%" y="453" width="2.3256%" height="15" fill="rgb(227,165,31)" fg:x="36" fg:w="2"/><text x="42.1105%" y="463.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2 samples, 2.33%)</title><rect x="41.8605%" y="437" width="2.3256%" height="15" fill="rgb(228,167,24)" fg:x="36" fg:w="2"/><text x="42.1105%" y="447.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 2.33%)</title><rect x="41.8605%" y="421" width="2.3256%" height="15" fill="rgb(228,143,12)" fg:x="36" fg:w="2"/><text x="42.1105%" y="431.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2 samples, 2.33%)</title><rect x="41.8605%" y="405" width="2.3256%" height="15" fill="rgb(249,149,8)" fg:x="36" fg:w="2"/><text x="42.1105%" y="415.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 1.16%)</title><rect x="43.0233%" y="389" width="1.1628%" height="15" fill="rgb(243,35,44)" fg:x="37" fg:w="1"/><text x="43.2733%" y="399.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 1.16%)</title><rect x="43.0233%" y="373" width="1.1628%" height="15" fill="rgb(246,89,9)" fg:x="37" fg:w="1"/><text x="43.2733%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="43.0233%" y="357" width="1.1628%" height="15" fill="rgb(233,213,13)" fg:x="37" fg:w="1"/><text x="43.2733%" y="367.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="43.0233%" y="341" width="1.1628%" height="15" fill="rgb(233,141,41)" fg:x="37" fg:w="1"/><text x="43.2733%" y="351.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="43.0233%" y="325" width="1.1628%" height="15" fill="rgb(239,167,4)" fg:x="37" fg:w="1"/><text x="43.2733%" y="335.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="43.0233%" y="309" width="1.1628%" height="15" fill="rgb(209,217,16)" fg:x="37" fg:w="1"/><text x="43.2733%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="43.0233%" y="293" width="1.1628%" height="15" fill="rgb(219,88,35)" fg:x="37" fg:w="1"/><text x="43.2733%" y="303.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="43.0233%" y="277" width="1.1628%" height="15" fill="rgb(220,193,23)" fg:x="37" fg:w="1"/><text x="43.2733%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="43.0233%" y="261" width="1.1628%" height="15" fill="rgb(230,90,52)" fg:x="37" fg:w="1"/><text x="43.2733%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="43.0233%" y="245" width="1.1628%" height="15" fill="rgb(252,106,19)" fg:x="37" fg:w="1"/><text x="43.2733%" y="255.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="43.0233%" y="229" width="1.1628%" height="15" fill="rgb(206,74,20)" fg:x="37" fg:w="1"/><text x="43.2733%" y="239.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="43.0233%" y="213" width="1.1628%" height="15" fill="rgb(230,138,44)" fg:x="37" fg:w="1"/><text x="43.2733%" y="223.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="43.0233%" y="197" width="1.1628%" height="15" fill="rgb(235,182,43)" fg:x="37" fg:w="1"/><text x="43.2733%" y="207.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 1.16%)</title><rect x="44.1860%" y="437" width="1.1628%" height="15" fill="rgb(242,16,51)" fg:x="38" fg:w="1"/><text x="44.4360%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="44.1860%" y="421" width="1.1628%" height="15" fill="rgb(248,9,4)" fg:x="38" fg:w="1"/><text x="44.4360%" y="431.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="44.1860%" y="405" width="1.1628%" height="15" fill="rgb(210,31,22)" fg:x="38" fg:w="1"/><text x="44.4360%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="44.1860%" y="389" width="1.1628%" height="15" fill="rgb(239,54,39)" fg:x="38" fg:w="1"/><text x="44.4360%" y="399.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="44.1860%" y="373" width="1.1628%" height="15" fill="rgb(230,99,41)" fg:x="38" fg:w="1"/><text x="44.4360%" y="383.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 1.16%)</title><rect x="44.1860%" y="357" width="1.1628%" height="15" fill="rgb(253,106,12)" fg:x="38" fg:w="1"/><text x="44.4360%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="44.1860%" y="341" width="1.1628%" height="15" fill="rgb(213,46,41)" fg:x="38" fg:w="1"/><text x="44.4360%" y="351.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1 samples, 1.16%)</title><rect x="44.1860%" y="325" width="1.1628%" height="15" fill="rgb(215,133,35)" fg:x="38" fg:w="1"/><text x="44.4360%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 1.16%)</title><rect x="44.1860%" y="309" width="1.1628%" height="15" fill="rgb(213,28,5)" fg:x="38" fg:w="1"/><text x="44.4360%" y="319.50"></text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (1 samples, 1.16%)</title><rect x="44.1860%" y="293" width="1.1628%" height="15" fill="rgb(215,77,49)" fg:x="38" fg:w="1"/><text x="44.4360%" y="303.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 1.16%)</title><rect x="44.1860%" y="277" width="1.1628%" height="15" fill="rgb(248,100,22)" fg:x="38" fg:w="1"/><text x="44.4360%" y="287.50"></text></g><g><title>greed::solver::GreedSolver::calc_normal_payoff (1 samples, 1.16%)</title><rect x="44.1860%" y="261" width="1.1628%" height="15" fill="rgb(208,67,9)" fg:x="38" fg:w="1"/><text x="44.4360%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 4.65%)</title><rect x="41.8605%" y="485" width="4.6512%" height="15" fill="rgb(219,133,21)" fg:x="36" fg:w="4"/><text x="42.1105%" y="495.50">rayon..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (4 samples, 4.65%)</title><rect x="41.8605%" y="469" width="4.6512%" height="15" fill="rgb(246,46,29)" fg:x="36" fg:w="4"/><text x="42.1105%" y="479.50">rayon..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (2 samples, 2.33%)</title><rect x="44.1860%" y="453" width="2.3256%" height="15" fill="rgb(246,185,52)" fg:x="38" fg:w="2"/><text x="44.4360%" y="463.50">r..</text></g><g><title>swtch_pri (1 samples, 1.16%)</title><rect x="45.3488%" y="437" width="1.1628%" height="15" fill="rgb(252,136,11)" fg:x="39" fg:w="1"/><text x="45.5988%" y="447.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (31 samples, 36.05%)</title><rect x="11.6279%" y="517" width="36.0465%" height="15" fill="rgb(219,138,53)" fg:x="10" fg:w="31"/><text x="11.8779%" y="527.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;:..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (5 samples, 5.81%)</title><rect x="41.8605%" y="501" width="5.8140%" height="15" fill="rgb(211,51,23)" fg:x="36" fg:w="5"/><text x="42.1105%" y="511.50">rayon_c..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 1.16%)</title><rect x="46.5116%" y="485" width="1.1628%" height="15" fill="rgb(247,221,28)" fg:x="40" fg:w="1"/><text x="46.7616%" y="495.50"></text></g><g><title>swtch_pri (1 samples, 1.16%)</title><rect x="46.5116%" y="469" width="1.1628%" height="15" fill="rgb(251,222,45)" fg:x="40" fg:w="1"/><text x="46.7616%" y="479.50"></text></g><g><title>_platform_memmove (2 samples, 2.33%)</title><rect x="48.8372%" y="437" width="2.3256%" height="15" fill="rgb(217,162,53)" fg:x="42" fg:w="2"/><text x="49.0872%" y="447.50">_..</text></g><g><title>rayon_core::registry::WorkerThread::find_work (4 samples, 4.65%)</title><rect x="47.6744%" y="517" width="4.6512%" height="15" fill="rgb(229,93,14)" fg:x="41" fg:w="4"/><text x="47.9244%" y="527.50">rayon..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 4.65%)</title><rect x="47.6744%" y="501" width="4.6512%" height="15" fill="rgb(209,67,49)" fg:x="41" fg:w="4"/><text x="47.9244%" y="511.50">&lt;core..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (4 samples, 4.65%)</title><rect x="47.6744%" y="485" width="4.6512%" height="15" fill="rgb(213,87,29)" fg:x="41" fg:w="4"/><text x="47.9244%" y="495.50">cross..</text></g><g><title>crossbeam_epoch::default::with_handle (4 samples, 4.65%)</title><rect x="47.6744%" y="469" width="4.6512%" height="15" fill="rgb(205,151,52)" fg:x="41" fg:w="4"/><text x="47.9244%" y="479.50">cross..</text></g><g><title>crossbeam_epoch::internal::Global::collect (3 samples, 3.49%)</title><rect x="48.8372%" y="453" width="3.4884%" height="15" fill="rgb(253,215,39)" fg:x="42" fg:w="3"/><text x="49.0872%" y="463.50">cro..</text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1 samples, 1.16%)</title><rect x="51.1628%" y="437" width="1.1628%" height="15" fill="rgb(221,220,41)" fg:x="44" fg:w="1"/><text x="51.4128%" y="447.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (1 samples, 1.16%)</title><rect x="52.3256%" y="517" width="1.1628%" height="15" fill="rgb(218,133,21)" fg:x="45" fg:w="1"/><text x="52.5756%" y="527.50"></text></g><g><title>__psynch_cvwait (1 samples, 1.16%)</title><rect x="52.3256%" y="501" width="1.1628%" height="15" fill="rgb(221,193,43)" fg:x="45" fg:w="1"/><text x="52.5756%" y="511.50"></text></g><g><title>all (86 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="86"/><text x="0.2500%" y="655.50"></text></g><g><title>thread_start (76 samples, 88.37%)</title><rect x="11.6279%" y="629" width="88.3721%" height="15" fill="rgb(253,114,12)" fg:x="10" fg:w="76"/><text x="11.8779%" y="639.50">thread_start</text></g><g><title>_pthread_start (76 samples, 88.37%)</title><rect x="11.6279%" y="613" width="88.3721%" height="15" fill="rgb(215,223,47)" fg:x="10" fg:w="76"/><text x="11.8779%" y="623.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (76 samples, 88.37%)</title><rect x="11.6279%" y="597" width="88.3721%" height="15" fill="rgb(248,225,23)" fg:x="10" fg:w="76"/><text x="11.8779%" y="607.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (76 samples, 88.37%)</title><rect x="11.6279%" y="581" width="88.3721%" height="15" fill="rgb(250,108,0)" fg:x="10" fg:w="76"/><text x="11.8779%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (76 samples, 88.37%)</title><rect x="11.6279%" y="565" width="88.3721%" height="15" fill="rgb(228,208,7)" fg:x="10" fg:w="76"/><text x="11.8779%" y="575.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::ThreadBuilder::run (76 samples, 88.37%)</title><rect x="11.6279%" y="549" width="88.3721%" height="15" fill="rgb(244,45,10)" fg:x="10" fg:w="76"/><text x="11.8779%" y="559.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (76 samples, 88.37%)</title><rect x="11.6279%" y="533" width="88.3721%" height="15" fill="rgb(207,125,25)" fg:x="10" fg:w="76"/><text x="11.8779%" y="543.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>swtch_pri (40 samples, 46.51%)</title><rect x="53.4884%" y="517" width="46.5116%" height="15" fill="rgb(210,195,18)" fg:x="46" fg:w="40"/><text x="53.7384%" y="527.50">swtch_pri</text></g></svg></svg>